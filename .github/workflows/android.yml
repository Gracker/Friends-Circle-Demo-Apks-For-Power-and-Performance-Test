name: Android CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
      
    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew
      
    - name: Get version info
      id: version
      run: |
        echo "BUILD_TIME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
    - name: Build all debug APKs
      run: ./gradlew assembleDebug --parallel
      
    - name: Rename APK files with version info
      run: |
        # 创建release目录
        mkdir -p release-apks
        
        # 重命名Debug APKs
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          cp app/build/outputs/apk/debug/app-debug.apk "release-apks/HighPerformanceFriendsCircle-debug-${{ steps.version.outputs.BUILD_TIME }}-${{ steps.version.outputs.SHORT_SHA }}.apk"
        fi
        
        if [ -f "wechatfriendforperformance/build/outputs/apk/debug/wechatfriendforperformance-debug.apk" ]; then
          cp wechatfriendforperformance/build/outputs/apk/debug/wechatfriendforperformance-debug.apk "release-apks/WeChatFriendForPerformance-debug-${{ steps.version.outputs.BUILD_TIME }}-${{ steps.version.outputs.SHORT_SHA }}.apk"
        fi
        
        if [ -f "wechatfriendforpower/build/outputs/apk/debug/wechatfriendforpower-debug.apk" ]; then
          cp wechatfriendforpower/build/outputs/apk/debug/wechatfriendforpower-debug.apk "release-apks/WeChatFriendForPower-debug-${{ steps.version.outputs.BUILD_TIME }}-${{ steps.version.outputs.SHORT_SHA }}.apk"
        fi
        
        if [ -f "wechatfriendforwebview/build/outputs/apk/debug/wechatfriendforwebview-debug.apk" ]; then
          cp wechatfriendforwebview/build/outputs/apk/debug/wechatfriendforwebview-debug.apk "release-apks/WeChatFriendForWebView-debug-${{ steps.version.outputs.BUILD_TIME }}-${{ steps.version.outputs.SHORT_SHA }}.apk"
        fi
        
        # 列出所有生成的文件
        echo "Generated APK files:"
        ls -la release-apks/
      
    - name: Upload APKs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-apks-${{ steps.version.outputs.BUILD_TIME }}
        path: release-apks/
        retention-days: 30
        
    - name: Create Release (only on push to master)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: auto-build-${{ steps.version.outputs.BUILD_TIME }}
        name: "自动构建 ${{ steps.version.outputs.BUILD_TIME }}"
        body: |
          🤖 **自动构建发布**
          
          📅 **构建时间**: ${{ steps.version.outputs.BUILD_TIME }}
          🔗 **提交**: ${{ steps.version.outputs.SHORT_SHA }}
          🌿 **分支**: ${{ steps.version.outputs.BRANCH_NAME }}
          
          ## 📦 包含的APK文件
          
          ### Debug版本 (可直接安装)
          - HighPerformanceFriendsCircle-debug - 主应用模块
          - WeChatFriendForPerformance-debug - 性能测试模块  
          - WeChatFriendForPower-debug - 功耗测试模块
          - WeChatFriendForWebView-debug - WebView测试模块
          
          ## 📝 说明
          - Debug版本可以直接安装使用
          - 所有APK都通过了自动化构建和基本检查
          - 如需Release版本，请在本地配置签名后手动构建
          
          ---
          💡 这是通过GitHub Actions自动生成的发布版本
        files: release-apks/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
