name: Manual Release with Signing

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: '版本名称 (例如: v1.2.0)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: '发布说明'
        required: false
        default: '新版本发布'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Make Gradle wrapper executable
      run: chmod +x ./gradlew
      
    - name: Decode Keystore (if available)
      if: ${{ secrets.KEYSTORE_BASE64 != '' }}
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'release.keystore'
        encodedString: ${{ secrets.KEYSTORE_BASE64 }}
        
    - name: Build Release APKs
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -f "release.keystore" ]; then
          echo "使用提供的签名密钥构建Release版本..."
          # 这里可以添加签名配置，暂时先构建无签名版本
          ./gradlew assembleRelease --parallel
        else
          echo "未提供签名密钥，构建无签名Release版本..."
          ./gradlew assembleRelease --parallel
        fi
      
    - name: Prepare Release Files
      run: |
        mkdir -p release-files
        BUILD_TIME=$(date +'%Y%m%d-%H%M%S')
        
        # 复制生成的APK文件
        find . -name "*-release*.apk" -type f | while read apk; do
          filename=$(basename "$apk")
          module_name=$(echo "$filename" | sed 's/-release.*//g')
          cp "$apk" "release-files/${module_name}-${{ github.event.inputs.version_name }}.apk"
        done
        
        # 复制现有的release文件夹中的APK（如果有的话）
        if [ -d "apk-released" ]; then
          cp apk-released/*.apk release-files/ 2>/dev/null || true
        fi
        
        echo "准备发布的文件:"
        ls -la release-files/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version_name }}
        name: "正式发布 ${{ github.event.inputs.version_name }}"
        body: |
          🎉 **正式版本发布**
          
          📱 **版本**: ${{ github.event.inputs.version_name }}
          📅 **发布时间**: $(date +'%Y-%m-%d %H:%M:%S')
          🔗 **提交**: $(git rev-parse --short HEAD)
          
          ## 📝 发布说明
          ${{ github.event.inputs.release_notes }}
          
          ## 📦 包含的应用
          
          ### 🚀 主要模块
          - **HighPerformanceFriendsCircle** - 高性能朋友圈主应用
          - **WeChatFriendForPerformance** - 性能测试模块
          - **WeChatFriendForPower** - 功耗测试模块  
          - **WeChatFriendForWebView** - WebView性能对比模块
          
          ## 🔧 安装说明
          1. 下载对应的APK文件
          2. 在Android设备上启用"允许安装未知来源应用"
          3. 直接安装APK文件
          
          ## 📊 性能特性
          - 高性能列表滑动优化
          - 多种负载测试模式
          - 功耗监控和分析
          - WebView与原生性能对比
          
          ## 🐛 问题反馈
          如果遇到问题，请在GitHub Issues中反馈
          
          ---
          ⭐ 感谢使用！如果觉得有用请给个Star
        files: release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}